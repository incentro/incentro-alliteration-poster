
/* _____ SYSTEM TOOLS _____ */

// importOnce
// this mixin makes it possible to have a file imported at multiple place and only be output the first time it is called
// it is used for placeholders to prevent them from being repeated by each file depending on them

$modules: () !default;
@mixin importOnce($uniqeRef) {
  @if not index($modules, $uniqeRef) {
    $modules: append($modules, $uniqeRef);
    @content;
  }
}

// system variables
$default-breakpoint: root;
$current-breakpoint: $default-breakpoint;
$placeholders: ();


// breakpoint
// this mixin needs to be used to enter a @media that will let use use cross-media placeholders
// ex:
//@include breakpoint(medium) {
//  .selector {
//    @include _use(clearfix);
//  }
//}
$breakpointsEnabled: true !default;
@mixin breakpoint($breakpoint) {
  @if $breakpointsEnabled {
    // Get the width from the keyword `$breakpoint`
    // Or `null` if the keyword doesn't exist in `$breakpoints` map
    $value: map-get($breakpoints, $breakpoint);

    // If `$breakpoint` exists as a key in `$breakpoints`
    @if $value != null {
      // Update `$current-breakpoint`
      $current-breakpoint: $breakpoint !global;

      // Open a media query block
      @media #{$value} {
        // Let the user dump content
        @content;
      }

      // Then reset `$current-breakpoint` to `$default-breakpoint` (root)
      $current-breakpoint: $default-breakpoint !global;
    }

      // If `$breakpoint` doesn't exist in `$breakpoints`,
      // Warn the user and do nothing
    @else {
      @warn "Invalid breakpoint `#{$breakpoint}`.";
    }
  }
}

// placeholder

@mixin _add($name) {
  // If placeholder doesn't exist yet in `$placeholders` list
  @if not index($placeholders, $name) {
    // Store its name
    $placeholders: append($placeholders, $name) !global;

    // At root level
    @at-root {
      // Looping through `$breakpoints`
      @each $breakpoint, $value in $breakpoints {
        // Opening a media query block
        @media #{$value} {

          // set the current-breakpoint so that nested calls to _use can work
          $current-breakpoint: $breakpoint !global;

          // Generating a placeholder
          // Called $name-$breakpoint
          %#{$name}-#{$breakpoint} {
            // dump the content
            @content;
          }

          // reset current-breakpoint
          $current-breakpoint: $default-breakpoint !global;
        }
      }

      // And dumping a placeholder out of any media query as well
      // so basically at root level
      %#{$name} {
        @content;
      }
    }
  }

    // If placeholder already exists, just warn the user
  @else {
    @warn "Placeholder `#{$name}` already exists.";
  }
}

// placeholder implementor

@mixin _use($name) {

  @if $current-breakpoint == $default-breakpoint {
    @extend %#{$name} !optional;
  } @else {
    @extend %#{$name}-#{$current-breakpoint} !optional;
  }

}


// keeps track of all themes
$theme-database: ();

// Index to provide unique id for variations
$theme-variation-index: 0;

//
@mixin addThemeVariation ($theme-name, $breakpoint: false){
  // Get current theme map ( if any )
  $theme: ();
  @if map-has-key($theme-database, $theme-name) {
    $theme: map-get($theme-database, $theme-name);
  }

  // variation index, used as an id for an individual variation
  $theme-variation-index: $theme-variation-index + 1 !global;

  // name of variation used to create extensible with
  $theme-variation-name: themeVariation--#{$theme-variation-index};

  // creates extensible class for current @content
  @include _add($theme-variation-name){
    @content;
  }

  // add variation name and selector to theme
  $theme: append($theme, (
    // variation name has been generated uniquely for this variation
    variation-name: $theme-variation-name,

    // breakpoint to apply variation on
    variation-breakpoint: $breakpoint,

    // the selector is the string representation of the current selector
    variation-selector: #{&}
  ));

  // update theme in theme database
  $theme-database: map-merge($theme-database, ($theme-name: $theme)) !global;

  // remove variation adding
  $theme-variation-beingadded: false !global;
}


@mixin applyTheme ($theme-name){
  // Get current theme map ( if any )
  $theme: ();
  @if map-has-key($theme-database, $theme-name) {
    $theme: map-get($theme-database, $theme-name);
  }

  // apply each theme variation on current path
  @each $theme-variation in $theme {

    // add stored sector to current selector
    #{map-get($theme-variation, variation-selector)} {


      @if (map-get($theme-variation, variation-breakpoint)){
        @include breakpoint(map-get($theme-variation, variation-breakpoint)){
          // extend class based on variation name
          @include _use(map-get($theme-variation, variation-name));
        }
      }
      @else {
        // extend class based on variation name
        @include _use(map-get($theme-variation, variation-name));
      }
    }
  }
}
